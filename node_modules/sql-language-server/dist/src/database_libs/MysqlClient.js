"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mysql = __importStar(require("mysql2/promise"));
const AbstractClient_1 = __importDefault(require("./AbstractClient"));
class MysqlClient extends AbstractClient_1.default {
    constructor(settings) {
        super(settings);
        this.connection = null;
    }
    get DefaultPort() { return 3306; }
    get DefaultHost() { return '127.0.0.1'; }
    get DefaultUser() { return 'root'; }
    async connect() {
        this.connection = await mysql.createConnection({
            host: this.settings.host || this.DefaultHost,
            password: this.settings.password || '',
            user: this.settings.user || this.DefaultUser,
            port: this.settings.port || this.DefaultPort,
            database: this.settings.database || ''
        });
        return true;
    }
    disconnect() {
        if (this.connection) {
            this.connection.end();
        }
        this.connection = null;
    }
    getTables() {
        const sql = `
      SELECT table_name 
      FROM information_schema.tables
      WHERE table_schema = '${this.settings.database}'
    `;
        return new Promise((resolve, reject) => {
            if (!this.connection) {
                reject(new Error("Don't have database connection."));
                return;
            }
            this.connection.query(sql, (err, results) => {
                if (err) {
                    reject(new Error(err.message));
                    return;
                }
                const tables = results.map((v) => v['table_name'] || v['TABLE_NAME']);
                resolve(tables);
            });
        });
    }
    getColumns(tableName) {
        const sql = `SHOW FULL FIELDS FROM ${tableName}`;
        return new Promise((resolve, reject) => {
            if (!this.connection) {
                reject(new Error("Don't have database connection."));
                return;
            }
            this.connection.query(sql, (err, results) => {
                if (err) {
                    reject(new Error(err.message));
                    return;
                }
                const columns = results.map((v) => ({
                    field: v.Field,
                    type: v.Type,
                    null: v.Null,
                    default: v.Default,
                    comment: v.Comment
                }));
                resolve(columns);
            });
        });
    }
}
exports.default = MysqlClient;
//# sourceMappingURL=MysqlClient.js.map